<?php

namespace App\Models;

use App\Models\Scopes\Searchable;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class ObjectiveQuestionOption extends Model
{
    use HasFactory;
    use Searchable;
    use SoftDeletes;

    protected $fillable = ['body', 'is_correct', 'objective_question_id', 'sort'];

    protected $searchableFields = ['*'];

    protected $table = 'objective_question_options';

    protected $casts = [
        'is_correct' => 'boolean',
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::created(function ($option){
            $question = (ObjectiveQuestion::where('id', $option->objective_question_id))->with('ObjectiveQuestionOptions')->first();
            if(count($question->ObjectiveQuestionOptions->where('is_correct', true)->where('deleted_at', null)) > 1) {
                $question->multi_option = true;
            } else {
                $question->multi_option = false;
            }
            $question->save();
        });

        static::updated(function ($option){
            $question = (ObjectiveQuestion::where('id', $option->objective_question_id))->with('ObjectiveQuestionOptions')->first();
            if(count($question->ObjectiveQuestionOptions->where('is_correct', true)->where('deleted_at', null)) > 1) {
                $question->multi_option = true;
            } else {
                $question->multi_option = false;
            }
            $question->save();
        });

        static::deleted(function ($option){
            $question = (ObjectiveQuestion::where('id', $option->objective_question_id))->with('ObjectiveQuestionOptions')->first();
            if(count($question->ObjectiveQuestionOptions->where('is_correct', true)->where('deleted_at', null)) > 1) {
                $question->multi_option = true;
            } else {
                $question->multi_option = false;
            }
            $question->save();
        });

    }


    public function objectiveQuestion()
    {
        return $this->belongsTo(ObjectiveQuestion::class);
    }

    public function objectiveAnswers()
    {
        return $this->hasMany(ObjectiveAnswer::class);
    }
}
